{"body":"<table>\r\n  <tr>\r\n    <th colspan=\"2\">Healthchecks</th>\r\n  </tr>\r\n  <tr>\r\n    <td>master</td>\r\n    <td><a href=\"http://travis-ci.org/#!/linkedin/inject/branch_summary\"><img src=\"https://secure.travis-ci.org/linkedin/inject.png?branch=master\"/></td>\r\n  </tr>\r\n  <tr>\r\n    <td>v0.4.x</td>\r\n    <td><a href=\"http://travis-ci.org/#!/linkedin/inject/branch_summary\"><img src=\"https://secure.travis-ci.org/linkedin/inject.png?branch=v0.4.x\"/></td>\r\n  </tr>\r\n  <tr>\r\n    <td>v0.3.x</td>\r\n    <td><a href=\"http://travis-ci.org/#!/linkedin/inject/branch_summary\"><img src=\"https://secure.travis-ci.org/linkedin/inject.png?branch=v0.3.x\"/></td>\r\n  </tr>\r\n</table>\r\n\r\n**Inject** (Apache Software License 2.0) is a revolutionary way to manage your dependencies in a *Library Agnostic* way. Some of its major features include:\r\n\r\n* CommonJS Compliance in the Browser (exports.*)\r\n  * View the full [CommonJS Support Matrix](https://github.com/linkedin/inject/wiki/CommonJS-Support)\r\n* Cross domain retrieval of files (via easyXDM)\r\n* localStorage (load a module once)\r\n* Frustratingly Simple\r\n\r\nGetting Started With Inject\r\n===\r\nThis page is designed to get you up and running with the latest version of Inject. For greater detail, there is an Advanced Usage section, and a guide to the API.\r\n\r\nDownload Inject\r\n===\r\nThe latest version of inject is always available via the source repository at https://github.com/linkedin/inject/downloads. The most recent version is usually at the top, and inside is the required JS and optional HTML files. Copy them to your own server.\r\n\r\nAdding Inject to Your Page\r\n===\r\nThis walkthrough is assuming you're using a directory called `js` which contains all of your javascript, possibly even this file. It also assumes inside of the `js` directory is a `modules` directory which will contain all of your modules. Your directory layout might look like the following:\r\n\r\n```\r\n|-index.html\r\n|-relay.html (optional)\r\n|-js\r\n    |-inject.js\r\n    |-modules\r\n      |-math.js\r\n      |-increment.js\r\n      |-program.js\r\n```\r\n\r\nThe location of the modules directory does not need to be under the `inject.js` file, but it's common practice to group files of similar types together such as JavaScript.\r\n\r\nStarting Your JavaScript\r\n===\r\nTo use inject, place the following script tags into the `<head>` of your document\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"inject.js\"></script>\r\n<script type=\"text/javascript\">\r\n  Inject.setModuleRoot(\"/js/modules\");\r\n  require.run(\"program\");\r\n</script>\r\n```\r\n\r\n* **Inject.setModuleRoot** is the location of ALL your JS modules. Based on the directory structure above, they are located in the `js/modules` directory.\r\n* **require.run** executes your main entry point, whatever it may be. Given the above directory structure, it will run the `program.js` file in your module root (from require.setModuleRoot). The `.js` is added automatically.\r\n\r\nSome Quick Configs\r\n===\r\nHere's some common configuration options you're going to want for Inject\r\n\r\n```js\r\n// Set the \"root\" where all your modules can be found\r\n// you can use an http:// path or just /path/to/modules like above\r\nInject.setModuleRoot(\"path\");\r\n\r\n// Specify how long files should be in localStorage (in minutes)\r\n// or 0 for never, which is great for development\r\nInject.setExpires(integerValue);\r\n\r\n// configure \"cross domain\" support. You need to put \"relay.swf\" and \"relay.html\"\r\n// on your remote server for this to work\r\nInject.setModuleRoot(\"http://example-cdn.com/modules\");\r\nInject.setCrossDomain({\r\n  relayHtml: \"http://example-cdn.com/relay.html\",\r\n  relaySwf: \"http://example-cdn.com/relay.swf\"\r\n});\r\n```\r\n\r\nWriting Some Modules\r\n===\r\nWhen you're ready to write your own modules, have a look at the [CommonJS Module Examples](https://github.com/linkedin/inject/wiki/CommonJS-Module-Examples) to get started.\r\n\r\nBuilding From Source\r\n===\r\nWe have a whole section on building from source. [Building From Source](https://github.com/linkedin/inject/wiki/0.4.x-Building-Inject-From-Source) has all the juicy details.\r\n\r\nNext Steps\r\n===\r\nFrom here, you can...\r\n\r\n* learn advanced syntax such as Inject.addRule() for custom module routing  \r\n  [addRule and Routing](https://github.com/linkedin/inject/wiki/0.4.x-addRule-and-Your-Favorite-Library)\r\n* make asynchronous includes using require.ensure() or go cross-domain  \r\n  [Advanced Usage API Guide](https://github.com/linkedin/inject/wiki/0.4.x-Advanced-Usage)\r\n* use AMD-compliant modules with define()  \r\n  [Advanced Usage API Guide](https://github.com/linkedin/inject/wiki/0.4.x-Advanced-Usage)\r\n* use existing libraries that you never thought had CommonJS Support  \r\n  [Recipies for Inject and Your Favorite Library](https://github.com/linkedin/inject/wiki/0.4.x-addRule-and-Your-Favorite-Library)\r\n* learn how to protect your code from JS minifiers  \r\n  [Common Minification Problems](https://github.com/linkedin/inject/wiki/Common-Minification-Problems)\r\n\r\nOn The Shoulders of Giants\r\n===\r\nInject couldn't be as great as it is without these other rockstar libraries:\r\n\r\n* easyXDM: Cross Domain Communication\r\n* lscache: LocalStorage Cache Provider \r\n* link.js: dependency extraction (from their src/Library/link.js)\r\n* GoWithTheFlow.js: simple flow control\r\n* (and a whole lot of npm related things for development)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Dependency Management got Awesome","name":"Inject"}